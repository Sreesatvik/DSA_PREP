You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

For non- adjacent flowers Code is:-

int minDays(vector<int>& bloomDay, int m, int k) {
    int low = 1;
    int high = *max_element(bloomDay.begin(), bloomDay.end());
    int total = m*k;
    int n= bloomDay.size();
    if (total>n) {
         return -1;
    }
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int x=flowers(bloomDay,mid);
            if(x<total) low=mid+1;
            else high=mid-1;
        }
        return low;
    }
    int flowers(vector<int>& bloomDay, int day){
        int cnt=0;
        for(int i=0;i<bloomDay.size();i++){
            if(bloomDay[i]<=day){
                cnt++;
            }
        }
        return cnt;
    }
For adjacent flowers Code is:-

bool possible(vector<int>& bloomDay, int day, int m, int k) {
    int n = bloomDay.size();
    int cnt = 0;
    int noOfB = 0;
    for (int i = 0; i < n; i++) {
        if (bloomDay[i] <= day) {
            cnt++;
        }
        else {
            noOfB += (cnt / k);
            cnt = 0;
        }
    }
    noOfB += (cnt / k);
    return noOfB >= m;
}

    int minDays(vector<int>& bloomDay, int m, int k) {
    long long val = m * 1ll * k * 1ll;
    int n = bloomDay.size();
    if (val > n) return -1; 
    int mini = INT_MAX, maxi = INT_MIN;
    for (int i = 0; i < n; i++) {
        mini = min(mini, bloomDay[i]);
        maxi = max(maxi, bloomDay[i]);
    }
    int low = mini, high = maxi;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (possible( bloomDay, mid, m, k)) {
            high = mid - 1;
        }
        else low = mid + 1;
    }
    return low;
    }
