Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

Code:

Method 1:Using stack(Not optimal)

bool isPalindrome(ListNode* head) {
        stack<int> st;
        ListNode* temp=head;
        while(temp != NULL){
            st.push(temp->val);
            temp=temp->next;
        }
        temp=head;
        while(temp !=NULL){
            if(temp->val!= st.top()){
                return false;
            }
            st.pop();
            temp=temp->next;
        }
        return true;
    }

Method 2:
Find the middle element using fast and slow ptrs and reveres the second half of the LL and and create a two ptrs for comparing the left half and right half.

    ListNode* reverseList(ListNode* head) {
        if (head == NULL || head->next == NULL) return head;
        ListNode* newHead = reverseList(head->next);
        head->next->next = head;
        head->next = NULL;
        return newHead;
    }   
    // find left middle
    bool isPalindrome(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        // slow is at the left middle / middele
        ListNode* newHead = reverseList(slow->next);// reverse for next half
        // comparison
        ListNode* a = head;
        ListNode* b = newHead;
        while(b){
            if(a->val != b->val) return false;
            a = a->next;
            b = b->next;
        }
        return true;
    }