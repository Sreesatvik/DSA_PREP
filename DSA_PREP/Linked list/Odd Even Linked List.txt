Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

Code:

Method1:
time comp = o(n)
space comp  = o(1)
ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode* odd=head;
        ListNode* even= head->next;
        ListNode* temp= even;
        while( even !=NULL && even->next!=NULL){
            odd->next=even->next;
            odd=odd->next;

            even->next=odd->next;
            even=even->next;
        }
        odd->next=temp;
        return head;
    }
Method 2:
time comp = o(n)
space comp  = o(n)
separate both odd and left into an array.Now take a pointer i in a array and pointer in a LL and start changing the data in each Node 
like temp->data=i and go till temp->next=NULL